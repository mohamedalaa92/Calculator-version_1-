
iti_5_0CALCULATORv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00002172  00002206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000ba  008000ba  00002260  2**0
                  ALLOC
  3 .stab         00001c98  00000000  00000000  00002260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e44  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000088d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000948b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <main>
      8a:	0c 94 b7 10 	jmp	0x216e	; 0x216e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e9       	ldi	r26, 0x9A	; 154
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e9       	ldi	r24, 0x9A	; 154
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PORT_voidInit>:
#include"PORT_private.h" 
#include"PORT_interface.h"


void PORT_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8f e0       	ldi	r24, 0x0F	; 15
     b6a:	80 83       	st	Z, r24
	

/************************************ INTI VALUE***********************************************/
	PORTA = PORTA_INITIAL_VALUE;
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
     b78:	e5 e3       	ldi	r30, 0x35	; 53
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
     b7e:	e2 e3       	ldi	r30, 0x32	; 50
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	80 83       	st	Z, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DIO_u8SetPinValue>:

/************************** SET_BIT & SET_PORT VALUE **************************************/

/********** this function shall set the value for the desired pin *************************/
u8 DIO_u8SetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	28 97       	sbiw	r28, 0x08	; 8
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
     ba6:	19 82       	std	Y+1, r1	; 0x01
	/*check if the correct port or, else send error */
	if (Copy_u8Pin <= DIO_u8PIN7)
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	88 30       	cpi	r24, 0x08	; 8
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_u8SetPinValue+0x24>
     bae:	f4 c0       	rjmp	.+488    	; 0xd98 <DIO_u8SetPinValue+0x20c>
	{
		/*check if the value is high or low or, else send error */
		if ( Copy_u8Value == DIO_u8PIN_LOW)
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	88 23       	and	r24, r24
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <DIO_u8SetPinValue+0x2c>
     bb6:	77 c0       	rjmp	.+238    	; 0xca6 <DIO_u8SetPinValue+0x11a>
		{
			switch ( Copy_u8Port )
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	38 87       	std	Y+8, r19	; 0x08
     bc0:	2f 83       	std	Y+7, r18	; 0x07
     bc2:	8f 81       	ldd	r24, Y+7	; 0x07
     bc4:	98 85       	ldd	r25, Y+8	; 0x08
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	59 f1       	breq	.+86     	; 0xc22 <DIO_u8SetPinValue+0x96>
     bcc:	2f 81       	ldd	r18, Y+7	; 0x07
     bce:	38 85       	ldd	r19, Y+8	; 0x08
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_u8SetPinValue+0x54>
     bd6:	8f 81       	ldd	r24, Y+7	; 0x07
     bd8:	98 85       	ldd	r25, Y+8	; 0x08
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <DIO_u8SetPinValue+0x6c>
     bde:	60 c0       	rjmp	.+192    	; 0xca0 <DIO_u8SetPinValue+0x114>
     be0:	2f 81       	ldd	r18, Y+7	; 0x07
     be2:	38 85       	ldd	r19, Y+8	; 0x08
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	89 f1       	breq	.+98     	; 0xc4c <DIO_u8SetPinValue+0xc0>
     bea:	8f 81       	ldd	r24, Y+7	; 0x07
     bec:	98 85       	ldd	r25, Y+8	; 0x08
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_u8SetPinValue+0x6a>
     bf4:	40 c0       	rjmp	.+128    	; 0xc76 <DIO_u8SetPinValue+0xea>
     bf6:	54 c0       	rjmp	.+168    	; 0xca0 <DIO_u8SetPinValue+0x114>
			{
			/*check if the correct port or, else send error */
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
     bf8:	ab e3       	ldi	r26, 0x3B	; 59
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	eb e3       	ldi	r30, 0x3B	; 59
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_u8SetPinValue+0x8a>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <DIO_u8SetPinValue+0x86>
     c1a:	80 95       	com	r24
     c1c:	84 23       	and	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	bd c0       	rjmp	.+378    	; 0xd9c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
     c22:	a8 e3       	ldi	r26, 0x38	; 56
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e8 e3       	ldi	r30, 0x38	; 56
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_u8SetPinValue+0xb4>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_u8SetPinValue+0xb0>
     c44:	80 95       	com	r24
     c46:	84 23       	and	r24, r20
     c48:	8c 93       	st	X, r24
     c4a:	a8 c0       	rjmp	.+336    	; 0xd9c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
     c4c:	a5 e3       	ldi	r26, 0x35	; 53
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e3       	ldi	r30, 0x35	; 53
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	48 2f       	mov	r20, r24
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 2e       	mov	r0, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_u8SetPinValue+0xde>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_u8SetPinValue+0xda>
     c6e:	80 95       	com	r24
     c70:	84 23       	and	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	93 c0       	rjmp	.+294    	; 0xd9c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
     c76:	a2 e3       	ldi	r26, 0x32	; 50
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e2 e3       	ldi	r30, 0x32	; 50
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 2e       	mov	r0, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <DIO_u8SetPinValue+0x108>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <DIO_u8SetPinValue+0x104>
     c98:	80 95       	com	r24
     c9a:	84 23       	and	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	7e c0       	rjmp	.+252    	; 0xd9c <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	7b c0       	rjmp	.+246    	; 0xd9c <DIO_u8SetPinValue+0x210>
			}

		}
		else if ( Copy_u8Value == DIO_u8PIN_HIGH)
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <DIO_u8SetPinValue+0x122>
     cac:	72 c0       	rjmp	.+228    	; 0xd92 <DIO_u8SetPinValue+0x206>
		{
			switch ( Copy_u8Port )
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3e 83       	std	Y+6, r19	; 0x06
     cb6:	2d 83       	std	Y+5, r18	; 0x05
     cb8:	8d 81       	ldd	r24, Y+5	; 0x05
     cba:	9e 81       	ldd	r25, Y+6	; 0x06
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	49 f1       	breq	.+82     	; 0xd14 <DIO_u8SetPinValue+0x188>
     cc2:	2d 81       	ldd	r18, Y+5	; 0x05
     cc4:	3e 81       	ldd	r19, Y+6	; 0x06
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <DIO_u8SetPinValue+0x14a>
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <DIO_u8SetPinValue+0x160>
     cd4:	5b c0       	rjmp	.+182    	; 0xd8c <DIO_u8SetPinValue+0x200>
     cd6:	2d 81       	ldd	r18, Y+5	; 0x05
     cd8:	3e 81       	ldd	r19, Y+6	; 0x06
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	71 f1       	breq	.+92     	; 0xd3c <DIO_u8SetPinValue+0x1b0>
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	e9 f1       	breq	.+122    	; 0xd64 <DIO_u8SetPinValue+0x1d8>
     cea:	50 c0       	rjmp	.+160    	; 0xd8c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
     cec:	ab e3       	ldi	r26, 0x3B	; 59
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	eb e3       	ldi	r30, 0x3B	; 59
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_u8SetPinValue+0x17e>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_u8SetPinValue+0x17a>
     d0e:	84 2b       	or	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	44 c0       	rjmp	.+136    	; 0xd9c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
     d14:	a8 e3       	ldi	r26, 0x38	; 56
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e8 e3       	ldi	r30, 0x38	; 56
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_u8SetPinValue+0x1a6>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_u8SetPinValue+0x1a2>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	30 c0       	rjmp	.+96     	; 0xd9c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
     d3c:	a5 e3       	ldi	r26, 0x35	; 53
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e3       	ldi	r30, 0x35	; 53
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_u8SetPinValue+0x1ce>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_u8SetPinValue+0x1ca>
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	1c c0       	rjmp	.+56     	; 0xd9c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
     d64:	a2 e3       	ldi	r26, 0x32	; 50
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e2 e3       	ldi	r30, 0x32	; 50
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_u8SetPinValue+0x1f6>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_u8SetPinValue+0x1f2>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <DIO_u8SetPinValue+0x210>

		}
		else
		{
			/*if wrong value (not high or low)*/
			Local_u8ErrorState = 1 ;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_u8SetPinValue+0x210>

	}
	else
	{
		/*if wrong pin number*/
		Local_u8ErrorState = 1 ;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9e:	28 96       	adiw	r28, 0x08	; 8
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <DIO_u8SetPortValue>:
/********** this function shall set the value for the desired port *************************/
u8 DIO_u8SetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <DIO_u8SetPortValue+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <DIO_u8SetPortValue+0x8>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
     dc2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3d 83       	std	Y+5, r19	; 0x05
     dcc:	2c 83       	std	Y+4, r18	; 0x04
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <DIO_u8SetPortValue+0x5c>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	2c f4       	brge	.+10     	; 0xdec <DIO_u8SetPortValue+0x3c>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	61 f0       	breq	.+24     	; 0xe02 <DIO_u8SetPortValue+0x52>
     dea:	1f c0       	rjmp	.+62     	; 0xe2a <DIO_u8SetPortValue+0x7a>
     dec:	2c 81       	ldd	r18, Y+4	; 0x04
     dee:	3d 81       	ldd	r19, Y+5	; 0x05
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	81 f0       	breq	.+32     	; 0xe16 <DIO_u8SetPortValue+0x66>
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	9d 81       	ldd	r25, Y+5	; 0x05
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	91 05       	cpc	r25, r1
     dfe:	81 f0       	breq	.+32     	; 0xe20 <DIO_u8SetPortValue+0x70>
     e00:	14 c0       	rjmp	.+40     	; 0xe2a <DIO_u8SetPortValue+0x7a>
	{
	/*check if the correct port or, else send error */
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
     e02:	eb e3       	ldi	r30, 0x3B	; 59
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	80 83       	st	Z, r24
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
     e16:	e5 e3       	ldi	r30, 0x35	; 53
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	80 83       	st	Z, r24
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
     e20:	e2 e3       	ldi	r30, 0x32	; 50
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	80 83       	st	Z, r24
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = 1 ;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <DIO_u8GetPinValue>:

/************************** GET_BIT & GET_PORT VALUE **************************************/

/********** this function shall get the value for the desired pin *************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8* Copy_pu8Value)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	27 97       	sbiw	r28, 0x07	; 7
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	6b 83       	std	Y+3, r22	; 0x03
     e58:	5d 83       	std	Y+5, r21	; 0x05
     e5a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
     e5c:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	09 f4       	brne	.+2      	; 0xe68 <DIO_u8GetPinValue+0x28>
     e66:	78 c0       	rjmp	.+240    	; 0xf58 <DIO_u8GetPinValue+0x118>
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	88 30       	cpi	r24, 0x08	; 8
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <DIO_u8GetPinValue+0x30>
     e6e:	74 c0       	rjmp	.+232    	; 0xf58 <DIO_u8GetPinValue+0x118>
	{
		switch (Copy_u8Port)
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3f 83       	std	Y+7, r19	; 0x07
     e78:	2e 83       	std	Y+6, r18	; 0x06
     e7a:	4e 81       	ldd	r20, Y+6	; 0x06
     e7c:	5f 81       	ldd	r21, Y+7	; 0x07
     e7e:	41 30       	cpi	r20, 0x01	; 1
     e80:	51 05       	cpc	r21, r1
     e82:	59 f1       	breq	.+86     	; 0xeda <DIO_u8GetPinValue+0x9a>
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	91 05       	cpc	r25, r1
     e8c:	34 f4       	brge	.+12     	; 0xe9a <DIO_u8GetPinValue+0x5a>
     e8e:	2e 81       	ldd	r18, Y+6	; 0x06
     e90:	3f 81       	ldd	r19, Y+7	; 0x07
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	69 f0       	breq	.+26     	; 0xeb2 <DIO_u8GetPinValue+0x72>
     e98:	5c c0       	rjmp	.+184    	; 0xf52 <DIO_u8GetPinValue+0x112>
     e9a:	4e 81       	ldd	r20, Y+6	; 0x06
     e9c:	5f 81       	ldd	r21, Y+7	; 0x07
     e9e:	42 30       	cpi	r20, 0x02	; 2
     ea0:	51 05       	cpc	r21, r1
     ea2:	79 f1       	breq	.+94     	; 0xf02 <DIO_u8GetPinValue+0xc2>
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_u8GetPinValue+0x70>
     eae:	3d c0       	rjmp	.+122    	; 0xf2a <DIO_u8GetPinValue+0xea>
     eb0:	50 c0       	rjmp	.+160    	; 0xf52 <DIO_u8GetPinValue+0x112>
		{
		/*check if the correct port or, else send error */
		case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
     eb2:	e9 e3       	ldi	r30, 0x39	; 57
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_u8GetPinValue+0x8a>
     ec6:	55 95       	asr	r21
     ec8:	47 95       	ror	r20
     eca:	8a 95       	dec	r24
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_u8GetPinValue+0x86>
     ece:	ca 01       	movw	r24, r20
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	ec 81       	ldd	r30, Y+4	; 0x04
     ed4:	fd 81       	ldd	r31, Y+5	; 0x05
     ed6:	80 83       	st	Z, r24
     ed8:	41 c0       	rjmp	.+130    	; 0xf5c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
     eda:	e6 e3       	ldi	r30, 0x36	; 54
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8GetPinValue+0xb2>
     eee:	55 95       	asr	r21
     ef0:	47 95       	ror	r20
     ef2:	8a 95       	dec	r24
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8GetPinValue+0xae>
     ef6:	ca 01       	movw	r24, r20
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	ec 81       	ldd	r30, Y+4	; 0x04
     efc:	fd 81       	ldd	r31, Y+5	; 0x05
     efe:	80 83       	st	Z, r24
     f00:	2d c0       	rjmp	.+90     	; 0xf5c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
     f02:	e3 e3       	ldi	r30, 0x33	; 51
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a9 01       	movw	r20, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8GetPinValue+0xda>
     f16:	55 95       	asr	r21
     f18:	47 95       	ror	r20
     f1a:	8a 95       	dec	r24
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8GetPinValue+0xd6>
     f1e:	ca 01       	movw	r24, r20
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	ec 81       	ldd	r30, Y+4	; 0x04
     f24:	fd 81       	ldd	r31, Y+5	; 0x05
     f26:	80 83       	st	Z, r24
     f28:	19 c0       	rjmp	.+50     	; 0xf5c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
     f2a:	e0 e3       	ldi	r30, 0x30	; 48
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a9 01       	movw	r20, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_u8GetPinValue+0x102>
     f3e:	55 95       	asr	r21
     f40:	47 95       	ror	r20
     f42:	8a 95       	dec	r24
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_u8GetPinValue+0xfe>
     f46:	ca 01       	movw	r24, r20
     f48:	81 70       	andi	r24, 0x01	; 1
     f4a:	ec 81       	ldd	r30, Y+4	; 0x04
     f4c:	fd 81       	ldd	r31, Y+5	; 0x05
     f4e:	80 83       	st	Z, r24
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <DIO_u8GetPinValue+0x11c>
		default : Local_u8ErrorState = 1  ;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5e:	27 96       	adiw	r28, 0x07	; 7
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <DIO_u8TogglePinValue>:

/************************** TOGGLE_BIT & TOGGLE_PORT VALUE **************************************/

/********** this function shall toggle the value for the desired pin **********************/
u8 DIO_u8TogglePinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_u8TogglePinValue+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_u8TogglePinValue+0x8>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
     f82:	19 82       	std	Y+1, r1	; 0x01
	/*check if the correct port or, else send error */
	if (Copy_u8Pin <= DIO_u8PIN7)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	08 f0       	brcs	.+2      	; 0xf8c <DIO_u8TogglePinValue+0x1c>
     f8a:	72 c0       	rjmp	.+228    	; 0x1070 <DIO_u8TogglePinValue+0x100>
	{
		switch ( Copy_u8Port )
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3d 83       	std	Y+5, r19	; 0x05
     f94:	2c 83       	std	Y+4, r18	; 0x04
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	49 f1       	breq	.+82     	; 0xff2 <DIO_u8TogglePinValue+0x82>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <DIO_u8TogglePinValue+0x44>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	61 f0       	breq	.+24     	; 0xfca <DIO_u8TogglePinValue+0x5a>
     fb2:	5b c0       	rjmp	.+182    	; 0x106a <DIO_u8TogglePinValue+0xfa>
     fb4:	2c 81       	ldd	r18, Y+4	; 0x04
     fb6:	3d 81       	ldd	r19, Y+5	; 0x05
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	71 f1       	breq	.+92     	; 0x101a <DIO_u8TogglePinValue+0xaa>
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	e9 f1       	breq	.+122    	; 0x1042 <DIO_u8TogglePinValue+0xd2>
     fc8:	50 c0       	rjmp	.+160    	; 0x106a <DIO_u8TogglePinValue+0xfa>
		{
		/*check if the correct port or, else send error */
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
     fca:	ab e3       	ldi	r26, 0x3B	; 59
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_u8TogglePinValue+0x78>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_u8TogglePinValue+0x74>
     fec:	84 27       	eor	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	41 c0       	rjmp	.+130    	; 0x1074 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
     ff2:	a8 e3       	ldi	r26, 0x38	; 56
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e8 e3       	ldi	r30, 0x38	; 56
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_u8TogglePinValue+0xa0>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_u8TogglePinValue+0x9c>
    1014:	84 27       	eor	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	2d c0       	rjmp	.+90     	; 0x1074 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    101a:	a5 e3       	ldi	r26, 0x35	; 53
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e3       	ldi	r30, 0x35	; 53
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8TogglePinValue+0xc8>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_u8TogglePinValue+0xc4>
    103c:	84 27       	eor	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	19 c0       	rjmp	.+50     	; 0x1074 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    1042:	a2 e3       	ldi	r26, 0x32	; 50
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e2 e3       	ldi	r30, 0x32	; 50
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_u8TogglePinValue+0xf0>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_u8TogglePinValue+0xec>
    1064:	84 27       	eor	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = 1 ;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_u8TogglePinValue+0x104>

	}
	else
	{
		/*if wrong pin number*/
		Local_u8ErrorState = 1 ;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <DIO_u8TogglePortValue>:

/********** this function shall toggle the value for the desired port **********************/
u8 DIO_u8TogglePortValue(u8 Copy_u8Port)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <DIO_u8TogglePortValue+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_u8TogglePortValue+0x8>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    1094:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3c 83       	std	Y+4, r19	; 0x04
    109e:	2b 83       	std	Y+3, r18	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	e9 f0       	breq	.+58     	; 0x10e4 <DIO_u8TogglePortValue+0x5e>
    10aa:	2b 81       	ldd	r18, Y+3	; 0x03
    10ac:	3c 81       	ldd	r19, Y+4	; 0x04
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <DIO_u8TogglePortValue+0x38>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <DIO_u8TogglePortValue+0x4e>
    10bc:	2b c0       	rjmp	.+86     	; 0x1114 <DIO_u8TogglePortValue+0x8e>
    10be:	2b 81       	ldd	r18, Y+3	; 0x03
    10c0:	3c 81       	ldd	r19, Y+4	; 0x04
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	b1 f0       	breq	.+44     	; 0x10f4 <DIO_u8TogglePortValue+0x6e>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	c9 f0       	breq	.+50     	; 0x1104 <DIO_u8TogglePortValue+0x7e>
    10d2:	20 c0       	rjmp	.+64     	; 0x1114 <DIO_u8TogglePortValue+0x8e>
	{
	/*check if the correct port or, else send error */
	case DIO_u8PORTA : PORTA = ~PORTA;  break;
    10d4:	ab e3       	ldi	r26, 0x3B	; 59
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	eb e3       	ldi	r30, 0x3B	; 59
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 95       	com	r24
    10e0:	8c 93       	st	X, r24
    10e2:	1a c0       	rjmp	.+52     	; 0x1118 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTB : PORTB = ~PORTB;  break;
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 95       	com	r24
    10f0:	8c 93       	st	X, r24
    10f2:	12 c0       	rjmp	.+36     	; 0x1118 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTC : PORTC = ~PORTC;  break;
    10f4:	a5 e3       	ldi	r26, 0x35	; 53
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e3       	ldi	r30, 0x35	; 53
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 95       	com	r24
    1100:	8c 93       	st	X, r24
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTD : PORTD = ~PORTD;  break;
    1104:	a2 e3       	ldi	r26, 0x32	; 50
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e2 e3       	ldi	r30, 0x32	; 50
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 95       	com	r24
    1110:	8c 93       	st	X, r24
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8TogglePortValue+0x92>
	default : Local_u8ErrorState = 1 ;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <DIO_u8InitPinPullUp>:


/********** this function shall control the pull up for the desired pin *******************/
u8 DIO_u8InitPinPullUp(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_u8InitPinPullUp+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_u8InitPinPullUp+0x8>
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    113a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	88 30       	cpi	r24, 0x08	; 8
    1140:	08 f0       	brcs	.+2      	; 0x1144 <DIO_u8InitPinPullUp+0x1c>
    1142:	72 c0       	rjmp	.+228    	; 0x1228 <DIO_u8InitPinPullUp+0x100>
	{
		switch (Copy_u8Port)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3d 83       	std	Y+5, r19	; 0x05
    114c:	2c 83       	std	Y+4, r18	; 0x04
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	49 f1       	breq	.+82     	; 0x11aa <DIO_u8InitPinPullUp+0x82>
    1158:	2c 81       	ldd	r18, Y+4	; 0x04
    115a:	3d 81       	ldd	r19, Y+5	; 0x05
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <DIO_u8InitPinPullUp+0x44>
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <DIO_u8InitPinPullUp+0x5a>
    116a:	5b c0       	rjmp	.+182    	; 0x1222 <DIO_u8InitPinPullUp+0xfa>
    116c:	2c 81       	ldd	r18, Y+4	; 0x04
    116e:	3d 81       	ldd	r19, Y+5	; 0x05
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	71 f1       	breq	.+92     	; 0x11d2 <DIO_u8InitPinPullUp+0xaa>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	e9 f1       	breq	.+122    	; 0x11fa <DIO_u8InitPinPullUp+0xd2>
    1180:	50 c0       	rjmp	.+160    	; 0x1222 <DIO_u8InitPinPullUp+0xfa>
		{
		/*check if the correct port or, else send error */
		case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1182:	ab e3       	ldi	r26, 0x3B	; 59
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_u8InitPinPullUp+0x78>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_u8InitPinPullUp+0x74>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	41 c0       	rjmp	.+130    	; 0x122c <DIO_u8InitPinPullUp+0x104>
		case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    11aa:	a8 e3       	ldi	r26, 0x38	; 56
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_u8InitPinPullUp+0xa0>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_u8InitPinPullUp+0x9c>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	2d c0       	rjmp	.+90     	; 0x122c <DIO_u8InitPinPullUp+0x104>
		case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    11d2:	a5 e3       	ldi	r26, 0x35	; 53
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_u8InitPinPullUp+0xc8>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_u8InitPinPullUp+0xc4>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	19 c0       	rjmp	.+50     	; 0x122c <DIO_u8InitPinPullUp+0x104>
		case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    11fa:	a2 e3       	ldi	r26, 0x32	; 50
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e2 e3       	ldi	r30, 0x32	; 50
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_u8InitPinPullUp+0xf0>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_u8InitPinPullUp+0xec>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	05 c0       	rjmp	.+10     	; 0x122c <DIO_u8InitPinPullUp+0x104>
		default : Local_u8ErrorState = 1  ;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8InitPinPullUp+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <KPD_u8GetPressedKey>:
#include"KPD_private.h"
#include "KPD_config.h"
#include "KPD_interface.h"

u8 KPD_u8GetPressedKey(void)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <KPD_u8GetPressedKey+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <KPD_u8GetPressedKey+0x8>
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ColumnIndex,Local_u8RowIndex,Local_u8PinState;
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	89 83       	std	Y+1, r24	; 0x01
	static u8 Localu8KPDArr[KPD_COLUMN_NUM][KPD_ROW_NUM] = KPD_ARR_VAL;

	static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDROWArr[KPD_ROW_NUM]       = {KPD_ROW0_PIN,    KPD_ROW1_PIN,    KPD_ROW2_PIN,    KPD_ROW3_PIN};

	for(Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < KPD_COLUMN_NUM ;Local_u8ColumnIndex++)
    1250:	1b 82       	std	Y+3, r1	; 0x03
    1252:	5e c0       	rjmp	.+188    	; 0x1310 <KPD_u8GetPressedKey+0xd2>
	{
		/*activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
    125c:	ea 55       	subi	r30, 0x5A	; 90
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	90 81       	ld	r25, Z
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	69 2f       	mov	r22, r25
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>
		for(Local_u8RowIndex = 0; Local_u8RowIndex < KPD_ROW_NUM; Local_u8RowIndex++ )
    126c:	1a 82       	std	Y+2, r1	; 0x02
    126e:	3d c0       	rjmp	.+122    	; 0x12ea <KPD_u8GetPressedKey+0xac>
		{
			/*read the current ROW*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDROWArr[Local_u8RowIndex],&Local_u8PinState);
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	ee 55       	subi	r30, 0x5E	; 94
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	90 81       	ld	r25, Z
    127e:	9e 01       	movw	r18, r28
    1280:	2c 5f       	subi	r18, 0xFC	; 252
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	69 2f       	mov	r22, r25
    1288:	a9 01       	movw	r20, r18
    128a:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8GetPinValue>
			/*check if switch is pressed*/
			if(DIO_u8PIN_LOW ==Local_u8PinState)
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	88 23       	and	r24, r24
    1292:	41 f5       	brne	.+80     	; 0x12e4 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Localu8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	48 2f       	mov	r20, r24
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	ca 01       	movw	r24, r20
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	fc 01       	movw	r30, r24
    12b0:	e6 55       	subi	r30, 0x56	; 86
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	80 81       	ld	r24, Z
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <KPD_u8GetPressedKey+0x9a>

				/*polling (busy waiting until the key is released)*/
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDROWArr[Local_u8RowIndex],&Local_u8PinState);
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	fc 01       	movw	r30, r24
    12c2:	ee 55       	subi	r30, 0x5E	; 94
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	90 81       	ld	r25, Z
    12c8:	9e 01       	movw	r18, r28
    12ca:	2c 5f       	subi	r18, 0xFC	; 252
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	83 e0       	ldi	r24, 0x03	; 3
    12d0:	69 2f       	mov	r22, r25
    12d2:	a9 01       	movw	r20, r18
    12d4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW ==Local_u8PinState)
			{
				Local_u8PressedKey = Localu8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*polling (busy waiting until the key is released)*/
				while(DIO_u8PIN_LOW == Local_u8PinState)
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	88 23       	and	r24, r24
    12dc:	71 f3       	breq	.-36     	; 0x12ba <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDROWArr[Local_u8RowIndex],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	1c c0       	rjmp	.+56     	; 0x131c <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < KPD_COLUMN_NUM ;Local_u8ColumnIndex++)
	{
		/*activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
		for(Local_u8RowIndex = 0; Local_u8RowIndex < KPD_ROW_NUM; Local_u8RowIndex++ )
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	08 f4       	brcc	.+2      	; 0x12f2 <KPD_u8GetPressedKey+0xb4>
    12f0:	bf cf       	rjmp	.-130    	; 0x1270 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		/*deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	fc 01       	movw	r30, r24
    12fa:	ea 55       	subi	r30, 0x5A	; 90
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	90 81       	ld	r25, Z
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	69 2f       	mov	r22, r25
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>
	static u8 Localu8KPDArr[KPD_COLUMN_NUM][KPD_ROW_NUM] = KPD_ARR_VAL;

	static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDROWArr[KPD_ROW_NUM]       = {KPD_ROW0_PIN,    KPD_ROW1_PIN,    KPD_ROW2_PIN,    KPD_ROW3_PIN};

	for(Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < KPD_COLUMN_NUM ;Local_u8ColumnIndex++)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	84 30       	cpi	r24, 0x04	; 4
    1314:	08 f4       	brcc	.+2      	; 0x1318 <KPD_u8GetPressedKey+0xda>
    1316:	9e cf       	rjmp	.-196    	; 0x1254 <KPD_u8GetPressedKey+0x16>
		}
		/*deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <CLCD_voidinit>:
#include "util/delay.h"



void CLCD_voidinit(void)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	2e 97       	sbiw	r28, 0x0e	; 14
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e2       	ldi	r26, 0x20	; 32
    1348:	b2 e4       	ldi	r27, 0x42	; 66
    134a:	8b 87       	std	Y+11, r24	; 0x0b
    134c:	9c 87       	std	Y+12, r25	; 0x0c
    134e:	ad 87       	std	Y+13, r26	; 0x0d
    1350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a ef       	ldi	r20, 0xFA	; 250
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8f 83       	std	Y+7, r24	; 0x07
    136c:	98 87       	std	Y+8, r25	; 0x08
    136e:	a9 87       	std	Y+9, r26	; 0x09
    1370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <CLCD_voidinit+0x66>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9e 83       	std	Y+6, r25	; 0x06
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <CLCD_voidinit+0xe4>
	else if (__tmp > 65535)
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <CLCD_voidinit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <CLCD_voidinit+0xc6>
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <CLCD_voidinit+0xb4>
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <CLCD_voidinit+0xa8>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <CLCD_voidinit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <CLCD_voidinit+0xf0>
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30ms*/
	_delay_ms(40);
	/*function set command : DB3->2 lines, DB2->5*8 font size*/
	CLCD_voidSendCommand(0b00111000);
    1426:	88 e3       	ldi	r24, 0x38	; 56
    1428:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
	/*we already made a delay in send command ,SO NO NEED(delay here 39us) */
	/*display on off control : DB2-> display enable,DB1-> disable cursor ,DB0-> no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    142c:	8c e0       	ldi	r24, 0x0C	; 12
    142e:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
	/*CLEAR DISPLAY : DB0*/
	CLCD_voidSendCommand(0b00000001);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>

}
    1438:	2e 96       	adiw	r28, 0x0e	; 14
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	2f 97       	sbiw	r28, 0x0f	; 15
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>

	/*set RW pin to low for write */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>

	/*set command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	6f 85       	ldd	r22, Y+15	; 0x0f
    1478:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_u8SetPortValue>

	/*send enable pulse pin */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e0       	ldi	r26, 0x00	; 0
    148c:	b0 e4       	ldi	r27, 0x40	; 64
    148e:	8b 87       	std	Y+11, r24	; 0x0b
    1490:	9c 87       	std	Y+12, r25	; 0x0c
    1492:	ad 87       	std	Y+13, r26	; 0x0d
    1494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1496:	6b 85       	ldd	r22, Y+11	; 0x0b
    1498:	7c 85       	ldd	r23, Y+12	; 0x0c
    149a:	8d 85       	ldd	r24, Y+13	; 0x0d
    149c:	9e 85       	ldd	r25, Y+14	; 0x0e
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a ef       	ldi	r20, 0xFA	; 250
    14a4:	54 e4       	ldi	r21, 0x44	; 68
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	8f 83       	std	Y+7, r24	; 0x07
    14b0:	98 87       	std	Y+8, r25	; 0x08
    14b2:	a9 87       	std	Y+9, r26	; 0x09
    14b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	4f e7       	ldi	r20, 0x7F	; 127
    14e6:	57 e4       	ldi	r21, 0x47	; 71
    14e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ec:	18 16       	cp	r1, r24
    14ee:	4c f5       	brge	.+82     	; 0x1542 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <CLCD_voidSendCommand+0xee>
    151a:	88 ec       	ldi	r24, 0xC8	; 200
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <CLCD_voidSendCommand+0xdc>
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f7       	brne	.-38     	; 0x151a <CLCD_voidSendCommand+0xd0>
    1540:	14 c0       	rjmp	.+40     	; 0x156a <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <CLCD_voidSendCommand+0x118>
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>
}
    1574:	2f 96       	adiw	r28, 0x0f	; 15
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	2f 97       	sbiw	r28, 0x0f	; 15
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>

	/*set RW pin to low for write */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>

	/*set datato data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    15b4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_u8SetPortValue>

	/*send enable pulse pin */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e4       	ldi	r27, 0x40	; 64
    15ca:	8b 87       	std	Y+11, r24	; 0x0b
    15cc:	9c 87       	std	Y+12, r25	; 0x0c
    15ce:	ad 87       	std	Y+13, r26	; 0x0d
    15d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8f 83       	std	Y+7, r24	; 0x07
    15ec:	98 87       	std	Y+8, r25	; 0x08
    15ee:	a9 87       	std	Y+9, r26	; 0x09
    15f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <CLCD_voidSendData+0xee>
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <CLCD_voidSendData+0xdc>
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <CLCD_voidSendData+0xd0>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <CLCD_voidSendData+0x118>
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_u8SetPinValue>
}
    16b0:	2f 96       	adiw	r28, 0x0f	; 15
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <CLCD_voidSendString+0x6>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	9b 83       	std	Y+3, r25	; 0x03
    16d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0 ;
    16d2:	19 82       	std	Y+1, r1	; 0x01
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	9b 81       	ldd	r25, Y+3	; 0x03
    16e0:	fc 01       	movw	r30, r24
    16e2:	e2 0f       	add	r30, r18
    16e4:	f3 1f       	adc	r31, r19
    16e6:	80 81       	ld	r24, Z
    16e8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>
		Local_u8Counter++;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0 ;
	while(Copy_pcString[Local_u8Counter] != '\0')
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	fc 01       	movw	r30, r24
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	80 81       	ld	r24, Z
    1704:	88 23       	and	r24, r24
    1706:	39 f7       	brne	.-50     	; 0x16d6 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <CLCD_voidGoToXY+0x6>
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos == 0)
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	88 23       	and	r24, r24
    1728:	19 f4       	brne	.+6      	; 0x1730 <CLCD_voidGoToXY+0x1c>
	{
		/*location is at first line*/
		Local_u8Address = Copy_u8YPos;
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	06 c0       	rjmp	.+12     	; 0x173c <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8XPos == 1)
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	19 f4       	brne	.+6      	; 0x173c <CLCD_voidGoToXY+0x28>
	{
		/*location is at second line*/
		Local_u8Address = Copy_u8YPos + 0x40;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	80 5c       	subi	r24, 0xC0	; 192
    173a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM address command and then send the command */
	CLCD_voidSendCommand(Local_u8Address+128);
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	80 58       	subi	r24, 0x80	; 128
    1740:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <CLCD_voidWriteSpecialChar>:


void CLCD_voidWriteSpecialChar(u8* Copy_pu8Pattern ,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	27 97       	sbiw	r28, 0x07	; 7
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	6d 83       	std	Y+5, r22	; 0x05
    176a:	4e 83       	std	Y+6, r20	; 0x06
    176c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0 ;
    176e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8loop ;

	/*calculate the CGRAM address whose each block is 8 bytes (block number * 8)*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	8a 83       	std	Y+2, r24	; 0x02

	/*send  CGRAM address command to LCD , with setting bit 6 , & clearing bit 6 ( it was already cleared)*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 5c       	subi	r24, 0xC0	; 192
    1788:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>

	/*write the pattern on CGRAM*/
	for (Local_u8loop = 0 ; Local_u8loop < 8; Local_u8loop++)
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <CLCD_voidWriteSpecialChar+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8loop]);
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	fc 01       	movw	r30, r24
    179c:	e2 0f       	add	r30, r18
    179e:	f3 1f       	adc	r31, r19
    17a0:	80 81       	ld	r24, Z
    17a2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>

	/*send  CGRAM address command to LCD , with setting bit 6 , & clearing bit 6 ( it was already cleared)*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);

	/*write the pattern on CGRAM*/
	for (Local_u8loop = 0 ; Local_u8loop < 8; Local_u8loop++)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	88 30       	cpi	r24, 0x08	; 8
    17b0:	78 f3       	brcs	.-34     	; 0x1790 <CLCD_voidWriteSpecialChar+0x40>
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8loop]);
	}

	/*go back to DDRAM to display the pattern by +128 as shown in memory or\
	by using (goto) function because its use +128 inside the function to access DDRAM memory*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    17b2:	8e 81       	ldd	r24, Y+6	; 0x06
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <CLCD_voidGoToXY>

	/*display the pattern written in CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>

}
    17c0:	27 96       	adiw	r28, 0x07	; 7
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u8Number)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	60 97       	sbiw	r28, 0x10	; 16
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	6d 87       	std	Y+13, r22	; 0x0d
    17e8:	7e 87       	std	Y+14, r23	; 0x0e
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
    17ec:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8SplitNum;
	u8 Local_u8Counter=0;
    17ee:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Array[10];
	if(Copy_u8Number == 0)
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	af 85       	ldd	r26, Y+15	; 0x0f
    17f6:	b8 89       	ldd	r27, Y+16	; 0x10
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	a1 05       	cpc	r26, r1
    17fc:	b1 05       	cpc	r27, r1
    17fe:	99 f5       	brne	.+102    	; 0x1866 <CLCD_voidWriteNumber+0x94>
	{
		CLCD_voidSendData(Copy_u8Number+0x30);
    1800:	8d 85       	ldd	r24, Y+13	; 0x0d
    1802:	80 5d       	subi	r24, 0xD0	; 208
    1804:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>
    1808:	4c c0       	rjmp	.+152    	; 0x18a2 <CLCD_voidWriteNumber+0xd0>
	}
	else
	{
		while(Copy_u8Number >0)
		{
			Local_u8SplitNum = (Copy_u8Number % 10);
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	af 85       	ldd	r26, Y+15	; 0x0f
    1810:	b8 89       	ldd	r27, Y+16	; 0x10
    1812:	2a e0       	ldi	r18, 0x0A	; 10
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 43 10 	call	0x2086	; 0x2086 <__udivmodsi4>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Array[Local_u8Counter]=Local_u8SplitNum;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	ce 01       	movw	r24, r28
    1830:	03 96       	adiw	r24, 0x03	; 3
    1832:	fc 01       	movw	r30, r24
    1834:	e2 0f       	add	r30, r18
    1836:	f3 1f       	adc	r31, r19
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	80 83       	st	Z, r24
			Copy_u8Number = Copy_u8Number/10;
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	af 85       	ldd	r26, Y+15	; 0x0f
    1842:	b8 89       	ldd	r27, Y+16	; 0x10
    1844:	2a e0       	ldi	r18, 0x0A	; 10
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 43 10 	call	0x2086	; 0x2086 <__udivmodsi4>
    1854:	da 01       	movw	r26, r20
    1856:	c9 01       	movw	r24, r18
    1858:	8d 87       	std	Y+13, r24	; 0x0d
    185a:	9e 87       	std	Y+14, r25	; 0x0e
    185c:	af 87       	std	Y+15, r26	; 0x0f
    185e:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Counter++;
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	89 83       	std	Y+1, r24	; 0x01
	{
		CLCD_voidSendData(Copy_u8Number+0x30);
	}
	else
	{
		while(Copy_u8Number >0)
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	af 85       	ldd	r26, Y+15	; 0x0f
    186c:	b8 89       	ldd	r27, Y+16	; 0x10
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	a1 05       	cpc	r26, r1
    1872:	b1 05       	cpc	r27, r1
    1874:	51 f6       	brne	.-108    	; 0x180a <CLCD_voidWriteNumber+0x38>
			Local_u8SplitNum = (Copy_u8Number % 10);
			Local_u8Array[Local_u8Counter]=Local_u8SplitNum;
			Copy_u8Number = Copy_u8Number/10;
			Local_u8Counter++;
		}
		for(Local_u8Counter=Local_u8Counter-1 ; Local_u8Counter>=0 ; Local_u8Counter--)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	81 50       	subi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
		{
			CLCD_voidSendData(Local_u8Array[Local_u8Counter]+0x30);
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	ce 01       	movw	r24, r28
    1884:	03 96       	adiw	r24, 0x03	; 3
    1886:	fc 01       	movw	r30, r24
    1888:	e2 0f       	add	r30, r18
    188a:	f3 1f       	adc	r31, r19
    188c:	80 81       	ld	r24, Z
    188e:	80 5d       	subi	r24, 0xD0	; 208
    1890:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>
			if(Local_u8Counter == 0)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	88 23       	and	r24, r24
    1898:	21 f0       	breq	.+8      	; 0x18a2 <CLCD_voidWriteNumber+0xd0>
			Local_u8SplitNum = (Copy_u8Number % 10);
			Local_u8Array[Local_u8Counter]=Local_u8SplitNum;
			Copy_u8Number = Copy_u8Number/10;
			Local_u8Counter++;
		}
		for(Local_u8Counter=Local_u8Counter-1 ; Local_u8Counter>=0 ; Local_u8Counter--)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	81 50       	subi	r24, 0x01	; 1
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	ed cf       	rjmp	.-38     	; 0x187c <CLCD_voidWriteNumber+0xaa>
				break;
			}
		}

	}
}
    18a2:	60 96       	adiw	r28, 0x10	; 16
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <CALCULATOR_screen_v2>:
u8 Local_u8first_op = 0;
u8 Local_u8Negative = 0;
u8 Local_u8Clear = 0;
u8 Local_u8Error = 0;
void CALCULATOR_screen_v2(u8 Copy_u8NumOperation)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	64 97       	sbiw	r28, 0x14	; 20
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	88 8b       	std	Y+16, r24	; 0x10

	if((Local_u8Clear == 1 &&  Copy_u8NumOperation != 0xff) ||Copy_u8NumOperation =='#' )
    18ca:	80 91 bd 00 	lds	r24, 0x00BD
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	19 f4       	brne	.+6      	; 0x18d8 <CALCULATOR_screen_v2+0x24>
    18d2:	88 89       	ldd	r24, Y+16	; 0x10
    18d4:	8f 3f       	cpi	r24, 0xFF	; 255
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <CALCULATOR_screen_v2+0x2c>
    18d8:	88 89       	ldd	r24, Y+16	; 0x10
    18da:	83 32       	cpi	r24, 0x23	; 35
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <CALCULATOR_screen_v2+0x2c>
    18de:	ab c0       	rjmp	.+342    	; 0x1a36 <CALCULATOR_screen_v2+0x182>
	{
		Label:
		if(Local_u8Error ==1 )
    18e0:	80 91 be 00 	lds	r24, 0x00BE
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	09 f0       	breq	.+2      	; 0x18ea <CALCULATOR_screen_v2+0x36>
    18e8:	84 c0       	rjmp	.+264    	; 0x19f2 <CALCULATOR_screen_v2+0x13e>
		{
			CLCD_voidSendCommand(1);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
			CLCD_voidSendString("ERROR, not");
    18f0:	80 e6       	ldi	r24, 0x60	; 96
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <CLCD_voidGoToXY>
			CLCD_voidSendString("Division by 0 ...");
    1900:	8b e6       	ldi	r24, 0x6B	; 107
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <CLCD_voidSendString>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a8 e4       	ldi	r26, 0x48	; 72
    190e:	b4 e4       	ldi	r27, 0x44	; 68
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	9c 87       	std	Y+12, r25	; 0x0c
    1914:	ad 87       	std	Y+13, r26	; 0x0d
    1916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a ef       	ldi	r20, 0xFA	; 250
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8f 83       	std	Y+7, r24	; 0x07
    1932:	98 87       	std	Y+8, r25	; 0x08
    1934:	a9 87       	std	Y+9, r26	; 0x09
    1936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <CALCULATOR_screen_v2+0xa6>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <CALCULATOR_screen_v2+0x124>
	else if (__tmp > 65535)
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <CALCULATOR_screen_v2+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <CALCULATOR_screen_v2+0x106>
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <CALCULATOR_screen_v2+0xf4>
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <CALCULATOR_screen_v2+0xe8>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <CALCULATOR_screen_v2+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <CALCULATOR_screen_v2+0x130>
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(800);
			Local_u8Clear = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 bd 00 	sts	0x00BD, r24
		}
		Local_u8Error = 0;
    19f2:	10 92 be 00 	sts	0x00BE, r1
		Local_u8Clear = 0;
    19f6:	10 92 bd 00 	sts	0x00BD, r1
		ptr.current_num = 0;
    19fa:	10 92 bf 00 	sts	0x00BF, r1
    19fe:	10 92 c0 00 	sts	0x00C0, r1
    1a02:	10 92 c1 00 	sts	0x00C1, r1
    1a06:	10 92 c2 00 	sts	0x00C2, r1
		ptr.current_operation = 0;
    1a0a:	10 92 c7 00 	sts	0x00C7, r1
		ptr.old_operation = 0;
    1a0e:	10 92 c8 00 	sts	0x00C8, r1
		ptr.result = 0;
    1a12:	10 92 c3 00 	sts	0x00C3, r1
    1a16:	10 92 c4 00 	sts	0x00C4, r1
    1a1a:	10 92 c5 00 	sts	0x00C5, r1
    1a1e:	10 92 c6 00 	sts	0x00C6, r1
		Local_u8Negative = 0;
    1a22:	10 92 bc 00 	sts	0x00BC, r1
		Local_u8first_num = 0;
    1a26:	10 92 ba 00 	sts	0x00BA, r1
		Local_u8first_op = 0;
    1a2a:	10 92 bb 00 	sts	0x00BB, r1

		CLCD_voidSendCommand(1);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
    1a34:	5a c2       	rjmp	.+1204   	; 0x1eea <CALCULATOR_screen_v2+0x636>

	}

	else if((Copy_u8NumOperation >= 0 && Copy_u8NumOperation <= 9) && Local_u8first_num == 0)
    1a36:	88 89       	ldd	r24, Y+16	; 0x10
    1a38:	8a 30       	cpi	r24, 0x0A	; 10
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <CALCULATOR_screen_v2+0x18a>
    1a3c:	41 c0       	rjmp	.+130    	; 0x1ac0 <CALCULATOR_screen_v2+0x20c>
    1a3e:	80 91 ba 00 	lds	r24, 0x00BA
    1a42:	88 23       	and	r24, r24
    1a44:	e9 f5       	brne	.+122    	; 0x1ac0 <CALCULATOR_screen_v2+0x20c>
	{

		CLCD_voidWriteNumber(Copy_u8NumOperation);
    1a46:	88 89       	ldd	r24, Y+16	; 0x10
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <CLCD_voidWriteNumber>
		ptr.current_num = (ptr.current_num * 10) + Copy_u8NumOperation;
    1a58:	80 91 bf 00 	lds	r24, 0x00BF
    1a5c:	90 91 c0 00 	lds	r25, 0x00C0
    1a60:	a0 91 c1 00 	lds	r26, 0x00C1
    1a64:	b0 91 c2 00 	lds	r27, 0x00C2
    1a68:	2a e0       	ldi	r18, 0x0A	; 10
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 24 10 	call	0x2048	; 0x2048 <__mulsi3>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	88 89       	ldd	r24, Y+16	; 0x10
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	82 0f       	add	r24, r18
    1a88:	93 1f       	adc	r25, r19
    1a8a:	a4 1f       	adc	r26, r20
    1a8c:	b5 1f       	adc	r27, r21
    1a8e:	80 93 bf 00 	sts	0x00BF, r24
    1a92:	90 93 c0 00 	sts	0x00C0, r25
    1a96:	a0 93 c1 00 	sts	0x00C1, r26
    1a9a:	b0 93 c2 00 	sts	0x00C2, r27
		ptr.result = ptr.current_num;
    1a9e:	80 91 bf 00 	lds	r24, 0x00BF
    1aa2:	90 91 c0 00 	lds	r25, 0x00C0
    1aa6:	a0 91 c1 00 	lds	r26, 0x00C1
    1aaa:	b0 91 c2 00 	lds	r27, 0x00C2
    1aae:	80 93 c3 00 	sts	0x00C3, r24
    1ab2:	90 93 c4 00 	sts	0x00C4, r25
    1ab6:	a0 93 c5 00 	sts	0x00C5, r26
    1aba:	b0 93 c6 00 	sts	0x00C6, r27
    1abe:	15 c2       	rjmp	.+1066   	; 0x1eea <CALCULATOR_screen_v2+0x636>
	}
	else if((Copy_u8NumOperation >= 0 && Copy_u8NumOperation <= 9) && Local_u8first_num == 1)
    1ac0:	88 89       	ldd	r24, Y+16	; 0x10
    1ac2:	8a 30       	cpi	r24, 0x0A	; 10
    1ac4:	88 f5       	brcc	.+98     	; 0x1b28 <CALCULATOR_screen_v2+0x274>
    1ac6:	80 91 ba 00 	lds	r24, 0x00BA
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	69 f5       	brne	.+90     	; 0x1b28 <CALCULATOR_screen_v2+0x274>
	{
		CLCD_voidWriteNumber(Copy_u8NumOperation);
    1ace:	88 89       	ldd	r24, Y+16	; 0x10
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <CLCD_voidWriteNumber>
		ptr.current_num = (ptr.current_num * 10) + Copy_u8NumOperation;
    1ae0:	80 91 bf 00 	lds	r24, 0x00BF
    1ae4:	90 91 c0 00 	lds	r25, 0x00C0
    1ae8:	a0 91 c1 00 	lds	r26, 0x00C1
    1aec:	b0 91 c2 00 	lds	r27, 0x00C2
    1af0:	2a e0       	ldi	r18, 0x0A	; 10
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 24 10 	call	0x2048	; 0x2048 <__mulsi3>
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	88 89       	ldd	r24, Y+16	; 0x10
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a0 e0       	ldi	r26, 0x00	; 0
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	82 0f       	add	r24, r18
    1b10:	93 1f       	adc	r25, r19
    1b12:	a4 1f       	adc	r26, r20
    1b14:	b5 1f       	adc	r27, r21
    1b16:	80 93 bf 00 	sts	0x00BF, r24
    1b1a:	90 93 c0 00 	sts	0x00C0, r25
    1b1e:	a0 93 c1 00 	sts	0x00C1, r26
    1b22:	b0 93 c2 00 	sts	0x00C2, r27
    1b26:	e1 c1       	rjmp	.+962    	; 0x1eea <CALCULATOR_screen_v2+0x636>

	}
	else if((Local_u8first_op = 0) &&(Copy_u8NumOperation == '+' ||Copy_u8NumOperation == '-' ||Copy_u8NumOperation == '*' ||Copy_u8NumOperation == '/'))
    1b28:	10 92 bb 00 	sts	0x00BB, r1
		CLCD_voidSendData(Copy_u8NumOperation);
		ptr.old_operation = Copy_u8NumOperation;
		ptr.result = ptr.current_num;
		ptr.current_num = 0;
	}
	else if((Local_u8first_op = 1) &&(Copy_u8NumOperation == '+' ||Copy_u8NumOperation == '-' ||Copy_u8NumOperation == '*' ||Copy_u8NumOperation == '/'))
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 93 bb 00 	sts	0x00BB, r24
    1b32:	88 89       	ldd	r24, Y+16	; 0x10
    1b34:	8b 32       	cpi	r24, 0x2B	; 43
    1b36:	51 f0       	breq	.+20     	; 0x1b4c <CALCULATOR_screen_v2+0x298>
    1b38:	88 89       	ldd	r24, Y+16	; 0x10
    1b3a:	8d 32       	cpi	r24, 0x2D	; 45
    1b3c:	39 f0       	breq	.+14     	; 0x1b4c <CALCULATOR_screen_v2+0x298>
    1b3e:	88 89       	ldd	r24, Y+16	; 0x10
    1b40:	8a 32       	cpi	r24, 0x2A	; 42
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <CALCULATOR_screen_v2+0x298>
    1b44:	88 89       	ldd	r24, Y+16	; 0x10
    1b46:	8f 32       	cpi	r24, 0x2F	; 47
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <CALCULATOR_screen_v2+0x298>
    1b4a:	c2 c0       	rjmp	.+388    	; 0x1cd0 <CALCULATOR_screen_v2+0x41c>
	{
		Local_u8first_num = 1 ;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 93 ba 00 	sts	0x00BA, r24
		Local_u8first_op = 1 ;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	80 93 bb 00 	sts	0x00BB, r24
		CLCD_voidSendData(Copy_u8NumOperation);
    1b58:	88 89       	ldd	r24, Y+16	; 0x10
    1b5a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>
		switch(ptr.old_operation)
    1b5e:	80 91 c8 00 	lds	r24, 0x00C8
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3c 8b       	std	Y+20, r19	; 0x14
    1b68:	2b 8b       	std	Y+19, r18	; 0x13
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	8b 32       	cpi	r24, 0x2B	; 43
    1b70:	91 05       	cpc	r25, r1
    1b72:	c1 f0       	breq	.+48     	; 0x1ba4 <CALCULATOR_screen_v2+0x2f0>
    1b74:	2b 89       	ldd	r18, Y+19	; 0x13
    1b76:	3c 89       	ldd	r19, Y+20	; 0x14
    1b78:	2c 32       	cpi	r18, 0x2C	; 44
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	3c f4       	brge	.+14     	; 0x1b8c <CALCULATOR_screen_v2+0x2d8>
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	8a 32       	cpi	r24, 0x2A	; 42
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <CALCULATOR_screen_v2+0x2d6>
    1b88:	47 c0       	rjmp	.+142    	; 0x1c18 <CALCULATOR_screen_v2+0x364>
    1b8a:	96 c0       	rjmp	.+300    	; 0x1cb8 <CALCULATOR_screen_v2+0x404>
    1b8c:	2b 89       	ldd	r18, Y+19	; 0x13
    1b8e:	3c 89       	ldd	r19, Y+20	; 0x14
    1b90:	2d 32       	cpi	r18, 0x2D	; 45
    1b92:	31 05       	cpc	r19, r1
    1b94:	21 f1       	breq	.+72     	; 0x1bde <CALCULATOR_screen_v2+0x32a>
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	8f 32       	cpi	r24, 0x2F	; 47
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <CALCULATOR_screen_v2+0x2ee>
    1ba0:	5a c0       	rjmp	.+180    	; 0x1c56 <CALCULATOR_screen_v2+0x3a2>
    1ba2:	8a c0       	rjmp	.+276    	; 0x1cb8 <CALCULATOR_screen_v2+0x404>
		{
		case '+':
			ptr.result += ptr.current_num;
    1ba4:	80 91 c3 00 	lds	r24, 0x00C3
    1ba8:	90 91 c4 00 	lds	r25, 0x00C4
    1bac:	a0 91 c5 00 	lds	r26, 0x00C5
    1bb0:	b0 91 c6 00 	lds	r27, 0x00C6
    1bb4:	20 91 bf 00 	lds	r18, 0x00BF
    1bb8:	30 91 c0 00 	lds	r19, 0x00C0
    1bbc:	40 91 c1 00 	lds	r20, 0x00C1
    1bc0:	50 91 c2 00 	lds	r21, 0x00C2
    1bc4:	82 0f       	add	r24, r18
    1bc6:	93 1f       	adc	r25, r19
    1bc8:	a4 1f       	adc	r26, r20
    1bca:	b5 1f       	adc	r27, r21
    1bcc:	80 93 c3 00 	sts	0x00C3, r24
    1bd0:	90 93 c4 00 	sts	0x00C4, r25
    1bd4:	a0 93 c5 00 	sts	0x00C5, r26
    1bd8:	b0 93 c6 00 	sts	0x00C6, r27
    1bdc:	6d c0       	rjmp	.+218    	; 0x1cb8 <CALCULATOR_screen_v2+0x404>
			break;
		case '-':
			ptr.result -= ptr.current_num;
    1bde:	80 91 c3 00 	lds	r24, 0x00C3
    1be2:	90 91 c4 00 	lds	r25, 0x00C4
    1be6:	a0 91 c5 00 	lds	r26, 0x00C5
    1bea:	b0 91 c6 00 	lds	r27, 0x00C6
    1bee:	20 91 bf 00 	lds	r18, 0x00BF
    1bf2:	30 91 c0 00 	lds	r19, 0x00C0
    1bf6:	40 91 c1 00 	lds	r20, 0x00C1
    1bfa:	50 91 c2 00 	lds	r21, 0x00C2
    1bfe:	82 1b       	sub	r24, r18
    1c00:	93 0b       	sbc	r25, r19
    1c02:	a4 0b       	sbc	r26, r20
    1c04:	b5 0b       	sbc	r27, r21
    1c06:	80 93 c3 00 	sts	0x00C3, r24
    1c0a:	90 93 c4 00 	sts	0x00C4, r25
    1c0e:	a0 93 c5 00 	sts	0x00C5, r26
    1c12:	b0 93 c6 00 	sts	0x00C6, r27
    1c16:	50 c0       	rjmp	.+160    	; 0x1cb8 <CALCULATOR_screen_v2+0x404>
			break;
		case '*':
			ptr.result *= ptr.current_num;
    1c18:	80 91 c3 00 	lds	r24, 0x00C3
    1c1c:	90 91 c4 00 	lds	r25, 0x00C4
    1c20:	a0 91 c5 00 	lds	r26, 0x00C5
    1c24:	b0 91 c6 00 	lds	r27, 0x00C6
    1c28:	20 91 bf 00 	lds	r18, 0x00BF
    1c2c:	30 91 c0 00 	lds	r19, 0x00C0
    1c30:	40 91 c1 00 	lds	r20, 0x00C1
    1c34:	50 91 c2 00 	lds	r21, 0x00C2
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 24 10 	call	0x2048	; 0x2048 <__mulsi3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	80 93 c3 00 	sts	0x00C3, r24
    1c48:	90 93 c4 00 	sts	0x00C4, r25
    1c4c:	a0 93 c5 00 	sts	0x00C5, r26
    1c50:	b0 93 c6 00 	sts	0x00C6, r27
    1c54:	31 c0       	rjmp	.+98     	; 0x1cb8 <CALCULATOR_screen_v2+0x404>
			break;
		case '/':
			if(ptr.current_num == 0)
    1c56:	80 91 bf 00 	lds	r24, 0x00BF
    1c5a:	90 91 c0 00 	lds	r25, 0x00C0
    1c5e:	a0 91 c1 00 	lds	r26, 0x00C1
    1c62:	b0 91 c2 00 	lds	r27, 0x00C2
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	a1 05       	cpc	r26, r1
    1c6a:	b1 05       	cpc	r27, r1
    1c6c:	39 f4       	brne	.+14     	; 0x1c7c <CALCULATOR_screen_v2+0x3c8>
			{
				Local_u8Error=1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	80 93 be 00 	sts	0x00BE, r24
				Local_u8Clear=1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 bd 00 	sts	0x00BD, r24
    1c7a:	1e c0       	rjmp	.+60     	; 0x1cb8 <CALCULATOR_screen_v2+0x404>
				break;
			}
			ptr.result /= ptr.current_num;
    1c7c:	80 91 c3 00 	lds	r24, 0x00C3
    1c80:	90 91 c4 00 	lds	r25, 0x00C4
    1c84:	a0 91 c5 00 	lds	r26, 0x00C5
    1c88:	b0 91 c6 00 	lds	r27, 0x00C6
    1c8c:	20 91 bf 00 	lds	r18, 0x00BF
    1c90:	30 91 c0 00 	lds	r19, 0x00C0
    1c94:	40 91 c1 00 	lds	r20, 0x00C1
    1c98:	50 91 c2 00 	lds	r21, 0x00C2
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodsi4>
    1ca4:	da 01       	movw	r26, r20
    1ca6:	c9 01       	movw	r24, r18
    1ca8:	80 93 c3 00 	sts	0x00C3, r24
    1cac:	90 93 c4 00 	sts	0x00C4, r25
    1cb0:	a0 93 c5 00 	sts	0x00C5, r26
    1cb4:	b0 93 c6 00 	sts	0x00C6, r27
			break;
		}
		ptr.old_operation = Copy_u8NumOperation;
    1cb8:	88 89       	ldd	r24, Y+16	; 0x10
    1cba:	80 93 c8 00 	sts	0x00C8, r24
		ptr.current_num = 0;
    1cbe:	10 92 bf 00 	sts	0x00BF, r1
    1cc2:	10 92 c0 00 	sts	0x00C0, r1
    1cc6:	10 92 c1 00 	sts	0x00C1, r1
    1cca:	10 92 c2 00 	sts	0x00C2, r1
    1cce:	0d c1       	rjmp	.+538    	; 0x1eea <CALCULATOR_screen_v2+0x636>

	}
	else if(Copy_u8NumOperation == '=' )
    1cd0:	88 89       	ldd	r24, Y+16	; 0x10
    1cd2:	8d 33       	cpi	r24, 0x3D	; 61
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <CALCULATOR_screen_v2+0x424>
    1cd6:	09 c1       	rjmp	.+530    	; 0x1eea <CALCULATOR_screen_v2+0x636>
	{

		switch(ptr.old_operation)
    1cd8:	80 91 c8 00 	lds	r24, 0x00C8
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3a 8b       	std	Y+18, r19	; 0x12
    1ce2:	29 8b       	std	Y+17, r18	; 0x11
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	8b 32       	cpi	r24, 0x2B	; 43
    1cea:	91 05       	cpc	r25, r1
    1cec:	c1 f0       	breq	.+48     	; 0x1d1e <CALCULATOR_screen_v2+0x46a>
    1cee:	29 89       	ldd	r18, Y+17	; 0x11
    1cf0:	3a 89       	ldd	r19, Y+18	; 0x12
    1cf2:	2c 32       	cpi	r18, 0x2C	; 44
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	3c f4       	brge	.+14     	; 0x1d06 <CALCULATOR_screen_v2+0x452>
    1cf8:	89 89       	ldd	r24, Y+17	; 0x11
    1cfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1cfc:	8a 32       	cpi	r24, 0x2A	; 42
    1cfe:	91 05       	cpc	r25, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <CALCULATOR_screen_v2+0x450>
    1d02:	82 c0       	rjmp	.+260    	; 0x1e08 <CALCULATOR_screen_v2+0x554>
    1d04:	d1 c0       	rjmp	.+418    	; 0x1ea8 <CALCULATOR_screen_v2+0x5f4>
    1d06:	29 89       	ldd	r18, Y+17	; 0x11
    1d08:	3a 89       	ldd	r19, Y+18	; 0x12
    1d0a:	2d 32       	cpi	r18, 0x2D	; 45
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	21 f1       	breq	.+72     	; 0x1d58 <CALCULATOR_screen_v2+0x4a4>
    1d10:	89 89       	ldd	r24, Y+17	; 0x11
    1d12:	9a 89       	ldd	r25, Y+18	; 0x12
    1d14:	8f 32       	cpi	r24, 0x2F	; 47
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <CALCULATOR_screen_v2+0x468>
    1d1a:	95 c0       	rjmp	.+298    	; 0x1e46 <CALCULATOR_screen_v2+0x592>
    1d1c:	c5 c0       	rjmp	.+394    	; 0x1ea8 <CALCULATOR_screen_v2+0x5f4>
		{
		case '+':
			ptr.result += ptr.current_num;
    1d1e:	80 91 c3 00 	lds	r24, 0x00C3
    1d22:	90 91 c4 00 	lds	r25, 0x00C4
    1d26:	a0 91 c5 00 	lds	r26, 0x00C5
    1d2a:	b0 91 c6 00 	lds	r27, 0x00C6
    1d2e:	20 91 bf 00 	lds	r18, 0x00BF
    1d32:	30 91 c0 00 	lds	r19, 0x00C0
    1d36:	40 91 c1 00 	lds	r20, 0x00C1
    1d3a:	50 91 c2 00 	lds	r21, 0x00C2
    1d3e:	82 0f       	add	r24, r18
    1d40:	93 1f       	adc	r25, r19
    1d42:	a4 1f       	adc	r26, r20
    1d44:	b5 1f       	adc	r27, r21
    1d46:	80 93 c3 00 	sts	0x00C3, r24
    1d4a:	90 93 c4 00 	sts	0x00C4, r25
    1d4e:	a0 93 c5 00 	sts	0x00C5, r26
    1d52:	b0 93 c6 00 	sts	0x00C6, r27
    1d56:	a8 c0       	rjmp	.+336    	; 0x1ea8 <CALCULATOR_screen_v2+0x5f4>
			break;
		case '-':
			if(ptr.current_num > ptr.result)
    1d58:	20 91 bf 00 	lds	r18, 0x00BF
    1d5c:	30 91 c0 00 	lds	r19, 0x00C0
    1d60:	40 91 c1 00 	lds	r20, 0x00C1
    1d64:	50 91 c2 00 	lds	r21, 0x00C2
    1d68:	80 91 c3 00 	lds	r24, 0x00C3
    1d6c:	90 91 c4 00 	lds	r25, 0x00C4
    1d70:	a0 91 c5 00 	lds	r26, 0x00C5
    1d74:	b0 91 c6 00 	lds	r27, 0x00C6
    1d78:	82 17       	cp	r24, r18
    1d7a:	93 07       	cpc	r25, r19
    1d7c:	a4 07       	cpc	r26, r20
    1d7e:	b5 07       	cpc	r27, r21
    1d80:	34 f5       	brge	.+76     	; 0x1dce <CALCULATOR_screen_v2+0x51a>
			{
				u8 temp;
				Local_u8Negative =1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 93 bc 00 	sts	0x00BC, r24
				temp = ptr.current_num - ptr.result;
    1d88:	80 91 bf 00 	lds	r24, 0x00BF
    1d8c:	90 91 c0 00 	lds	r25, 0x00C0
    1d90:	a0 91 c1 00 	lds	r26, 0x00C1
    1d94:	b0 91 c2 00 	lds	r27, 0x00C2
    1d98:	28 2f       	mov	r18, r24
    1d9a:	80 91 c3 00 	lds	r24, 0x00C3
    1d9e:	90 91 c4 00 	lds	r25, 0x00C4
    1da2:	a0 91 c5 00 	lds	r26, 0x00C5
    1da6:	b0 91 c6 00 	lds	r27, 0x00C6
    1daa:	92 2f       	mov	r25, r18
    1dac:	98 1b       	sub	r25, r24
    1dae:	89 2f       	mov	r24, r25
    1db0:	8f 87       	std	Y+15, r24	; 0x0f
				ptr.result = temp;
    1db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e0       	ldi	r26, 0x00	; 0
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	80 93 c3 00 	sts	0x00C3, r24
    1dc0:	90 93 c4 00 	sts	0x00C4, r25
    1dc4:	a0 93 c5 00 	sts	0x00C5, r26
    1dc8:	b0 93 c6 00 	sts	0x00C6, r27
    1dcc:	6d c0       	rjmp	.+218    	; 0x1ea8 <CALCULATOR_screen_v2+0x5f4>
				break;
			}

			ptr.result -= ptr.current_num;
    1dce:	80 91 c3 00 	lds	r24, 0x00C3
    1dd2:	90 91 c4 00 	lds	r25, 0x00C4
    1dd6:	a0 91 c5 00 	lds	r26, 0x00C5
    1dda:	b0 91 c6 00 	lds	r27, 0x00C6
    1dde:	20 91 bf 00 	lds	r18, 0x00BF
    1de2:	30 91 c0 00 	lds	r19, 0x00C0
    1de6:	40 91 c1 00 	lds	r20, 0x00C1
    1dea:	50 91 c2 00 	lds	r21, 0x00C2
    1dee:	82 1b       	sub	r24, r18
    1df0:	93 0b       	sbc	r25, r19
    1df2:	a4 0b       	sbc	r26, r20
    1df4:	b5 0b       	sbc	r27, r21
    1df6:	80 93 c3 00 	sts	0x00C3, r24
    1dfa:	90 93 c4 00 	sts	0x00C4, r25
    1dfe:	a0 93 c5 00 	sts	0x00C5, r26
    1e02:	b0 93 c6 00 	sts	0x00C6, r27
    1e06:	50 c0       	rjmp	.+160    	; 0x1ea8 <CALCULATOR_screen_v2+0x5f4>
			break;
		case '*':
			ptr.result *= ptr.current_num;
    1e08:	80 91 c3 00 	lds	r24, 0x00C3
    1e0c:	90 91 c4 00 	lds	r25, 0x00C4
    1e10:	a0 91 c5 00 	lds	r26, 0x00C5
    1e14:	b0 91 c6 00 	lds	r27, 0x00C6
    1e18:	20 91 bf 00 	lds	r18, 0x00BF
    1e1c:	30 91 c0 00 	lds	r19, 0x00C0
    1e20:	40 91 c1 00 	lds	r20, 0x00C1
    1e24:	50 91 c2 00 	lds	r21, 0x00C2
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 24 10 	call	0x2048	; 0x2048 <__mulsi3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	80 93 c3 00 	sts	0x00C3, r24
    1e38:	90 93 c4 00 	sts	0x00C4, r25
    1e3c:	a0 93 c5 00 	sts	0x00C5, r26
    1e40:	b0 93 c6 00 	sts	0x00C6, r27
    1e44:	31 c0       	rjmp	.+98     	; 0x1ea8 <CALCULATOR_screen_v2+0x5f4>
			break;
		case '/':
			if(ptr.current_num == 0)
    1e46:	80 91 bf 00 	lds	r24, 0x00BF
    1e4a:	90 91 c0 00 	lds	r25, 0x00C0
    1e4e:	a0 91 c1 00 	lds	r26, 0x00C1
    1e52:	b0 91 c2 00 	lds	r27, 0x00C2
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	a1 05       	cpc	r26, r1
    1e5a:	b1 05       	cpc	r27, r1
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <CALCULATOR_screen_v2+0x5b8>
			{
				Local_u8Error=1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 be 00 	sts	0x00BE, r24
				Local_u8Clear=1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 bd 00 	sts	0x00BD, r24
    1e6a:	3a cd       	rjmp	.-1420   	; 0x18e0 <CALCULATOR_screen_v2+0x2c>
				goto Label;
			}
			ptr.result /= ptr.current_num;
    1e6c:	80 91 c3 00 	lds	r24, 0x00C3
    1e70:	90 91 c4 00 	lds	r25, 0x00C4
    1e74:	a0 91 c5 00 	lds	r26, 0x00C5
    1e78:	b0 91 c6 00 	lds	r27, 0x00C6
    1e7c:	20 91 bf 00 	lds	r18, 0x00BF
    1e80:	30 91 c0 00 	lds	r19, 0x00C0
    1e84:	40 91 c1 00 	lds	r20, 0x00C1
    1e88:	50 91 c2 00 	lds	r21, 0x00C2
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodsi4>
    1e94:	da 01       	movw	r26, r20
    1e96:	c9 01       	movw	r24, r18
    1e98:	80 93 c3 00 	sts	0x00C3, r24
    1e9c:	90 93 c4 00 	sts	0x00C4, r25
    1ea0:	a0 93 c5 00 	sts	0x00C5, r26
    1ea4:	b0 93 c6 00 	sts	0x00C6, r27
			break;
		}
		ptr.current_num = 0;
    1ea8:	10 92 bf 00 	sts	0x00BF, r1
    1eac:	10 92 c0 00 	sts	0x00C0, r1
    1eb0:	10 92 c1 00 	sts	0x00C1, r1
    1eb4:	10 92 c2 00 	sts	0x00C2, r1
		CLCD_voidSendData(Copy_u8NumOperation);
    1eb8:	88 89       	ldd	r24, Y+16	; 0x10
    1eba:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>
		if(Local_u8Negative == 1)
    1ebe:	80 91 bc 00 	lds	r24, 0x00BC
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	19 f4       	brne	.+6      	; 0x1ecc <CALCULATOR_screen_v2+0x618>
			CLCD_voidSendData('-');
    1ec6:	8d e2       	ldi	r24, 0x2D	; 45
    1ec8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <CLCD_voidSendData>
		CLCD_voidWriteNumber(ptr.result);
    1ecc:	80 91 c3 00 	lds	r24, 0x00C3
    1ed0:	90 91 c4 00 	lds	r25, 0x00C4
    1ed4:	a0 91 c5 00 	lds	r26, 0x00C5
    1ed8:	b0 91 c6 00 	lds	r27, 0x00C6
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <CLCD_voidWriteNumber>
		Local_u8Clear = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	80 93 bd 00 	sts	0x00BD, r24





}
    1eea:	64 96       	adiw	r28, 0x14	; 20
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <main>:

#include "CALCULATOR_interface.h"
#include "util/delay.h"

void main (void)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	60 97       	sbiw	r28, 0x10	; 16
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ValueCal;
	u8 i;
	PORT_voidInit();
    1f10:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	CLCD_voidinit();
    1f14:	0e 94 97 09 	call	0x132e	; 0x132e <CLCD_voidinit>
	for(i=0; i<=16; i++)
    1f18:	1f 86       	std	Y+15, r1	; 0x0f
    1f1a:	88 c0       	rjmp	.+272    	; 0x202c <main+0x130>
	{ 	CLCD_voidGoToXY(0,i);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f20:	0e 94 8a 0b 	call	0x1714	; 0x1714 <CLCD_voidGoToXY>
		CLCD_voidSendString("##Version 1##");
    1f24:	8d e7       	ldi	r24, 0x7D	; 125
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,i);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f30:	0e 94 8a 0b 	call	0x1714	; 0x1714 <CLCD_voidGoToXY>
		CLCD_voidSendString("##Calculator##");
    1f34:	8b e8       	ldi	r24, 0x8B	; 139
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <CLCD_voidSendString>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a8 ec       	ldi	r26, 0xC8	; 200
    1f42:	b2 e4       	ldi	r27, 0x42	; 66
    1f44:	8b 87       	std	Y+11, r24	; 0x0b
    1f46:	9c 87       	std	Y+12, r25	; 0x0c
    1f48:	ad 87       	std	Y+13, r26	; 0x0d
    1f4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a ef       	ldi	r20, 0xFA	; 250
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8f 83       	std	Y+7, r24	; 0x07
    1f66:	98 87       	std	Y+8, r25	; 0x08
    1f68:	a9 87       	std	Y+9, r26	; 0x09
    1f6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <main+0x92>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <main+0x110>
	else if (__tmp > 65535)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <main+0xf2>
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <main+0xe0>
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <main+0xd4>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <main+0x11c>
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		CLCD_voidSendCommand(1);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
{
	u8 Local_u8ValueCal;
	u8 i;
	PORT_voidInit();
	CLCD_voidinit();
	for(i=0; i<=16; i++)
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	8f 87       	std	Y+15, r24	; 0x0f
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	81 31       	cpi	r24, 0x11	; 17
    2030:	08 f4       	brcc	.+2      	; 0x2034 <main+0x138>
    2032:	74 cf       	rjmp	.-280    	; 0x1f1c <main+0x20>
		CLCD_voidGoToXY(1,i);
		CLCD_voidSendString("##Calculator##");
		_delay_ms(100);
		CLCD_voidSendCommand(1);
	}
	CLCD_voidSendCommand(1);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	0e 94 25 0a 	call	0x144a	; 0x144a <CLCD_voidSendCommand>
	while(1)
	{

		Local_u8ValueCal = KPD_u8GetPressedKey();
    203a:	0e 94 1f 09 	call	0x123e	; 0x123e <KPD_u8GetPressedKey>
    203e:	88 8b       	std	Y+16, r24	; 0x10
		CALCULATOR_screen_v2(Local_u8ValueCal);
    2040:	88 89       	ldd	r24, Y+16	; 0x10
    2042:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <CALCULATOR_screen_v2>
    2046:	f9 cf       	rjmp	.-14     	; 0x203a <main+0x13e>

00002048 <__mulsi3>:
    2048:	62 9f       	mul	r22, r18
    204a:	d0 01       	movw	r26, r0
    204c:	73 9f       	mul	r23, r19
    204e:	f0 01       	movw	r30, r0
    2050:	82 9f       	mul	r24, r18
    2052:	e0 0d       	add	r30, r0
    2054:	f1 1d       	adc	r31, r1
    2056:	64 9f       	mul	r22, r20
    2058:	e0 0d       	add	r30, r0
    205a:	f1 1d       	adc	r31, r1
    205c:	92 9f       	mul	r25, r18
    205e:	f0 0d       	add	r31, r0
    2060:	83 9f       	mul	r24, r19
    2062:	f0 0d       	add	r31, r0
    2064:	74 9f       	mul	r23, r20
    2066:	f0 0d       	add	r31, r0
    2068:	65 9f       	mul	r22, r21
    206a:	f0 0d       	add	r31, r0
    206c:	99 27       	eor	r25, r25
    206e:	72 9f       	mul	r23, r18
    2070:	b0 0d       	add	r27, r0
    2072:	e1 1d       	adc	r30, r1
    2074:	f9 1f       	adc	r31, r25
    2076:	63 9f       	mul	r22, r19
    2078:	b0 0d       	add	r27, r0
    207a:	e1 1d       	adc	r30, r1
    207c:	f9 1f       	adc	r31, r25
    207e:	bd 01       	movw	r22, r26
    2080:	cf 01       	movw	r24, r30
    2082:	11 24       	eor	r1, r1
    2084:	08 95       	ret

00002086 <__udivmodsi4>:
    2086:	a1 e2       	ldi	r26, 0x21	; 33
    2088:	1a 2e       	mov	r1, r26
    208a:	aa 1b       	sub	r26, r26
    208c:	bb 1b       	sub	r27, r27
    208e:	fd 01       	movw	r30, r26
    2090:	0d c0       	rjmp	.+26     	; 0x20ac <__udivmodsi4_ep>

00002092 <__udivmodsi4_loop>:
    2092:	aa 1f       	adc	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	ee 1f       	adc	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	a2 17       	cp	r26, r18
    209c:	b3 07       	cpc	r27, r19
    209e:	e4 07       	cpc	r30, r20
    20a0:	f5 07       	cpc	r31, r21
    20a2:	20 f0       	brcs	.+8      	; 0x20ac <__udivmodsi4_ep>
    20a4:	a2 1b       	sub	r26, r18
    20a6:	b3 0b       	sbc	r27, r19
    20a8:	e4 0b       	sbc	r30, r20
    20aa:	f5 0b       	sbc	r31, r21

000020ac <__udivmodsi4_ep>:
    20ac:	66 1f       	adc	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	1a 94       	dec	r1
    20b6:	69 f7       	brne	.-38     	; 0x2092 <__udivmodsi4_loop>
    20b8:	60 95       	com	r22
    20ba:	70 95       	com	r23
    20bc:	80 95       	com	r24
    20be:	90 95       	com	r25
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	bd 01       	movw	r22, r26
    20c6:	cf 01       	movw	r24, r30
    20c8:	08 95       	ret

000020ca <__divmodsi4>:
    20ca:	97 fb       	bst	r25, 7
    20cc:	09 2e       	mov	r0, r25
    20ce:	05 26       	eor	r0, r21
    20d0:	0e d0       	rcall	.+28     	; 0x20ee <__divmodsi4_neg1>
    20d2:	57 fd       	sbrc	r21, 7
    20d4:	04 d0       	rcall	.+8      	; 0x20de <__divmodsi4_neg2>
    20d6:	d7 df       	rcall	.-82     	; 0x2086 <__udivmodsi4>
    20d8:	0a d0       	rcall	.+20     	; 0x20ee <__divmodsi4_neg1>
    20da:	00 1c       	adc	r0, r0
    20dc:	38 f4       	brcc	.+14     	; 0x20ec <__divmodsi4_exit>

000020de <__divmodsi4_neg2>:
    20de:	50 95       	com	r21
    20e0:	40 95       	com	r20
    20e2:	30 95       	com	r19
    20e4:	21 95       	neg	r18
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	4f 4f       	sbci	r20, 0xFF	; 255
    20ea:	5f 4f       	sbci	r21, 0xFF	; 255

000020ec <__divmodsi4_exit>:
    20ec:	08 95       	ret

000020ee <__divmodsi4_neg1>:
    20ee:	f6 f7       	brtc	.-4      	; 0x20ec <__divmodsi4_exit>
    20f0:	90 95       	com	r25
    20f2:	80 95       	com	r24
    20f4:	70 95       	com	r23
    20f6:	61 95       	neg	r22
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	8f 4f       	sbci	r24, 0xFF	; 255
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	08 95       	ret

00002100 <__prologue_saves__>:
    2100:	2f 92       	push	r2
    2102:	3f 92       	push	r3
    2104:	4f 92       	push	r4
    2106:	5f 92       	push	r5
    2108:	6f 92       	push	r6
    210a:	7f 92       	push	r7
    210c:	8f 92       	push	r8
    210e:	9f 92       	push	r9
    2110:	af 92       	push	r10
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	ca 1b       	sub	r28, r26
    212a:	db 0b       	sbc	r29, r27
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	09 94       	ijmp

00002138 <__epilogue_restores__>:
    2138:	2a 88       	ldd	r2, Y+18	; 0x12
    213a:	39 88       	ldd	r3, Y+17	; 0x11
    213c:	48 88       	ldd	r4, Y+16	; 0x10
    213e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2140:	6e 84       	ldd	r6, Y+14	; 0x0e
    2142:	7d 84       	ldd	r7, Y+13	; 0x0d
    2144:	8c 84       	ldd	r8, Y+12	; 0x0c
    2146:	9b 84       	ldd	r9, Y+11	; 0x0b
    2148:	aa 84       	ldd	r10, Y+10	; 0x0a
    214a:	b9 84       	ldd	r11, Y+9	; 0x09
    214c:	c8 84       	ldd	r12, Y+8	; 0x08
    214e:	df 80       	ldd	r13, Y+7	; 0x07
    2150:	ee 80       	ldd	r14, Y+6	; 0x06
    2152:	fd 80       	ldd	r15, Y+5	; 0x05
    2154:	0c 81       	ldd	r16, Y+4	; 0x04
    2156:	1b 81       	ldd	r17, Y+3	; 0x03
    2158:	aa 81       	ldd	r26, Y+2	; 0x02
    215a:	b9 81       	ldd	r27, Y+1	; 0x01
    215c:	ce 0f       	add	r28, r30
    215e:	d1 1d       	adc	r29, r1
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	ed 01       	movw	r28, r26
    216c:	08 95       	ret

0000216e <_exit>:
    216e:	f8 94       	cli

00002170 <__stop_program>:
    2170:	ff cf       	rjmp	.-2      	; 0x2170 <__stop_program>
